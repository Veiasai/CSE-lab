// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datanode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CachingStrategyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachingStrategyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpReadBlockProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpReadBlockProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PacketHeaderProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeaderProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpWriteBlockProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpWriteBlockProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpWriteBlockProto_BlockConstructionStage_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PipelineAckProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PipelineAckProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datanode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_datanode_2eproto() {
  protobuf_AddDesc_datanode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datanode.proto");
  GOOGLE_CHECK(file != NULL);
  CachingStrategyProto_descriptor_ = file->message_type(0);
  static const int CachingStrategyProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachingStrategyProto, dropbehind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachingStrategyProto, readahead_),
  };
  CachingStrategyProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CachingStrategyProto_descriptor_,
      CachingStrategyProto::default_instance_,
      CachingStrategyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachingStrategyProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(CachingStrategyProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachingStrategyProto, _internal_metadata_),
      -1);
  OpReadBlockProto_descriptor_ = file->message_type(1);
  static const int OpReadBlockProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, sendchecksums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, cachingstrategy_),
  };
  OpReadBlockProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpReadBlockProto_descriptor_,
      OpReadBlockProto::default_instance_,
      OpReadBlockProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpReadBlockProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpReadBlockProto, _internal_metadata_),
      -1);
  PacketHeaderProto_descriptor_ = file->message_type(2);
  static const int PacketHeaderProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, offsetinblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, lastpacketinblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, datalen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, syncblock_),
  };
  PacketHeaderProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketHeaderProto_descriptor_,
      PacketHeaderProto::default_instance_,
      PacketHeaderProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(PacketHeaderProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeaderProto, _internal_metadata_),
      -1);
  OpWriteBlockProto_descriptor_ = file->message_type(3);
  static const int OpWriteBlockProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, pipelinesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, minbytesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, maxbytesrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, latestgenerationstamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, requestedchecksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, cachingstrategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, storagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, targetstoragetypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, allowlazypersist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, pinning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, targetpinnings_),
  };
  OpWriteBlockProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpWriteBlockProto_descriptor_,
      OpWriteBlockProto::default_instance_,
      OpWriteBlockProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpWriteBlockProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpWriteBlockProto, _internal_metadata_),
      -1);
  OpWriteBlockProto_BlockConstructionStage_descriptor_ = OpWriteBlockProto_descriptor_->enum_type(0);
  PipelineAckProto_descriptor_ = file->message_type(4);
  static const int PipelineAckProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineAckProto, seqno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineAckProto, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineAckProto, downstreamacktimenanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineAckProto, flag_),
  };
  PipelineAckProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PipelineAckProto_descriptor_,
      PipelineAckProto::default_instance_,
      PipelineAckProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineAckProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(PipelineAckProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PipelineAckProto, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datanode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CachingStrategyProto_descriptor_, &CachingStrategyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpReadBlockProto_descriptor_, &OpReadBlockProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketHeaderProto_descriptor_, &PacketHeaderProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpWriteBlockProto_descriptor_, &OpWriteBlockProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PipelineAckProto_descriptor_, &PipelineAckProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datanode_2eproto() {
  delete CachingStrategyProto::default_instance_;
  delete CachingStrategyProto_reflection_;
  delete OpReadBlockProto::default_instance_;
  delete OpReadBlockProto_reflection_;
  delete PacketHeaderProto::default_instance_;
  delete PacketHeaderProto_reflection_;
  delete OpWriteBlockProto::default_instance_;
  delete OpWriteBlockProto_reflection_;
  delete PipelineAckProto::default_instance_;
  delete PipelineAckProto_reflection_;
}

void protobuf_AddDesc_datanode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_datanode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016datanode.proto\032\014common.proto\"=\n\024Cachin"
    "gStrategyProto\022\022\n\ndropBehind\030\001 \001(\010\022\021\n\tre"
    "adahead\030\002 \001(\003\"\251\001\n\020OpReadBlockProto\022+\n\006he"
    "ader\030\001 \002(\0132\033.ClientOperationHeaderProto\022"
    "\016\n\006offset\030\002 \002(\004\022\013\n\003len\030\003 \002(\004\022\033\n\rsendChec"
    "ksums\030\004 \001(\010:\004true\022.\n\017cachingStrategy\030\005 \001"
    "(\0132\025.CachingStrategyProto\"\177\n\021PacketHeade"
    "rProto\022\025\n\roffsetInBlock\030\001 \002(\020\022\r\n\005seqno\030\002"
    " \002(\020\022\031\n\021lastPacketInBlock\030\003 \002(\010\022\017\n\007dataL"
    "en\030\004 \002(\017\022\030\n\tsyncBlock\030\005 \001(\010:\005false\"\270\006\n\021O"
    "pWriteBlockProto\022+\n\006header\030\001 \002(\0132\033.Clien"
    "tOperationHeaderProto\022#\n\007targets\030\002 \003(\0132\022"
    ".DatanodeInfoProto\022\"\n\006source\030\003 \001(\0132\022.Dat"
    "anodeInfoProto\0228\n\005stage\030\004 \002(\0162).OpWriteB"
    "lockProto.BlockConstructionStage\022\024\n\014pipe"
    "lineSize\030\005 \002(\r\022\024\n\014minBytesRcvd\030\006 \002(\004\022\024\n\014"
    "maxBytesRcvd\030\007 \002(\004\022\035\n\025latestGenerationSt"
    "amp\030\010 \002(\004\022)\n\021requestedChecksum\030\t \002(\0132\016.C"
    "hecksumProto\022.\n\017cachingStrategy\030\n \001(\0132\025."
    "CachingStrategyProto\022,\n\013storageType\030\013 \001("
    "\0162\021.StorageTypeProto:\004DISK\022-\n\022targetStor"
    "ageTypes\030\014 \003(\0162\021.StorageTypeProto\022\037\n\020all"
    "owLazyPersist\030\r \001(\010:\005false\022\026\n\007pinning\030\016 "
    "\001(\010:\005false\022\026\n\016targetPinnings\030\017 \003(\010\"\210\002\n\026B"
    "lockConstructionStage\022\031\n\025PIPELINE_SETUP_"
    "APPEND\020\000\022\"\n\036PIPELINE_SETUP_APPEND_RECOVE"
    "RY\020\001\022\022\n\016DATA_STREAMING\020\002\022%\n!PIPELINE_SET"
    "UP_STREAMING_RECOVERY\020\003\022\022\n\016PIPELINE_CLOS"
    "E\020\004\022\033\n\027PIPELINE_CLOSE_RECOVERY\020\005\022\031\n\025PIPE"
    "LINE_SETUP_CREATE\020\006\022\020\n\014TRANSFER_RBW\020\007\022\026\n"
    "\022TRANSFER_FINALIZED\020\010\"n\n\020PipelineAckProt"
    "o\022\r\n\005seqno\030\001 \002(\022\022\026\n\005reply\030\002 \003(\0162\007.Status"
    "\022!\n\026downstreamAckTimeNanos\030\003 \001(\004:\0010\022\020\n\004f"
    "lag\030\004 \003(\rB\002\020\001", 1333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datanode.proto", &protobuf_RegisterTypes);
  CachingStrategyProto::default_instance_ = new CachingStrategyProto();
  OpReadBlockProto::default_instance_ = new OpReadBlockProto();
  PacketHeaderProto::default_instance_ = new PacketHeaderProto();
  OpWriteBlockProto::default_instance_ = new OpWriteBlockProto();
  PipelineAckProto::default_instance_ = new PipelineAckProto();
  CachingStrategyProto::default_instance_->InitAsDefaultInstance();
  OpReadBlockProto::default_instance_->InitAsDefaultInstance();
  PacketHeaderProto::default_instance_->InitAsDefaultInstance();
  OpWriteBlockProto::default_instance_->InitAsDefaultInstance();
  PipelineAckProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datanode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datanode_2eproto {
  StaticDescriptorInitializer_datanode_2eproto() {
    protobuf_AddDesc_datanode_2eproto();
  }
} static_descriptor_initializer_datanode_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CachingStrategyProto::kDropBehindFieldNumber;
const int CachingStrategyProto::kReadaheadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CachingStrategyProto::CachingStrategyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CachingStrategyProto)
}

void CachingStrategyProto::InitAsDefaultInstance() {
}

CachingStrategyProto::CachingStrategyProto(const CachingStrategyProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CachingStrategyProto)
}

void CachingStrategyProto::SharedCtor() {
  _cached_size_ = 0;
  dropbehind_ = false;
  readahead_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachingStrategyProto::~CachingStrategyProto() {
  // @@protoc_insertion_point(destructor:CachingStrategyProto)
  SharedDtor();
}

void CachingStrategyProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CachingStrategyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachingStrategyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachingStrategyProto_descriptor_;
}

const CachingStrategyProto& CachingStrategyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datanode_2eproto();
  return *default_instance_;
}

CachingStrategyProto* CachingStrategyProto::default_instance_ = NULL;

CachingStrategyProto* CachingStrategyProto::New(::google::protobuf::Arena* arena) const {
  CachingStrategyProto* n = new CachingStrategyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CachingStrategyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CachingStrategyProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CachingStrategyProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CachingStrategyProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(readahead_, dropbehind_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CachingStrategyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CachingStrategyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dropBehind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropbehind_)));
          set_has_dropbehind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_readahead;
        break;
      }

      // optional int64 readahead = 2;
      case 2: {
        if (tag == 16) {
         parse_readahead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &readahead_)));
          set_has_readahead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CachingStrategyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CachingStrategyProto)
  return false;
#undef DO_
}

void CachingStrategyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CachingStrategyProto)
  // optional bool dropBehind = 1;
  if (has_dropbehind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dropbehind(), output);
  }

  // optional int64 readahead = 2;
  if (has_readahead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->readahead(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CachingStrategyProto)
}

::google::protobuf::uint8* CachingStrategyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CachingStrategyProto)
  // optional bool dropBehind = 1;
  if (has_dropbehind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dropbehind(), target);
  }

  // optional int64 readahead = 2;
  if (has_readahead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->readahead(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CachingStrategyProto)
  return target;
}

int CachingStrategyProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CachingStrategyProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool dropBehind = 1;
    if (has_dropbehind()) {
      total_size += 1 + 1;
    }

    // optional int64 readahead = 2;
    if (has_readahead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->readahead());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachingStrategyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CachingStrategyProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CachingStrategyProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CachingStrategyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CachingStrategyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CachingStrategyProto)
    MergeFrom(*source);
  }
}

void CachingStrategyProto::MergeFrom(const CachingStrategyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CachingStrategyProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropbehind()) {
      set_dropbehind(from.dropbehind());
    }
    if (from.has_readahead()) {
      set_readahead(from.readahead());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CachingStrategyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CachingStrategyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachingStrategyProto::CopyFrom(const CachingStrategyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CachingStrategyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachingStrategyProto::IsInitialized() const {

  return true;
}

void CachingStrategyProto::Swap(CachingStrategyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CachingStrategyProto::InternalSwap(CachingStrategyProto* other) {
  std::swap(dropbehind_, other->dropbehind_);
  std::swap(readahead_, other->readahead_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CachingStrategyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachingStrategyProto_descriptor_;
  metadata.reflection = CachingStrategyProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CachingStrategyProto

// optional bool dropBehind = 1;
bool CachingStrategyProto::has_dropbehind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CachingStrategyProto::set_has_dropbehind() {
  _has_bits_[0] |= 0x00000001u;
}
void CachingStrategyProto::clear_has_dropbehind() {
  _has_bits_[0] &= ~0x00000001u;
}
void CachingStrategyProto::clear_dropbehind() {
  dropbehind_ = false;
  clear_has_dropbehind();
}
 bool CachingStrategyProto::dropbehind() const {
  // @@protoc_insertion_point(field_get:CachingStrategyProto.dropBehind)
  return dropbehind_;
}
 void CachingStrategyProto::set_dropbehind(bool value) {
  set_has_dropbehind();
  dropbehind_ = value;
  // @@protoc_insertion_point(field_set:CachingStrategyProto.dropBehind)
}

// optional int64 readahead = 2;
bool CachingStrategyProto::has_readahead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CachingStrategyProto::set_has_readahead() {
  _has_bits_[0] |= 0x00000002u;
}
void CachingStrategyProto::clear_has_readahead() {
  _has_bits_[0] &= ~0x00000002u;
}
void CachingStrategyProto::clear_readahead() {
  readahead_ = GOOGLE_LONGLONG(0);
  clear_has_readahead();
}
 ::google::protobuf::int64 CachingStrategyProto::readahead() const {
  // @@protoc_insertion_point(field_get:CachingStrategyProto.readahead)
  return readahead_;
}
 void CachingStrategyProto::set_readahead(::google::protobuf::int64 value) {
  set_has_readahead();
  readahead_ = value;
  // @@protoc_insertion_point(field_set:CachingStrategyProto.readahead)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpReadBlockProto::kHeaderFieldNumber;
const int OpReadBlockProto::kOffsetFieldNumber;
const int OpReadBlockProto::kLenFieldNumber;
const int OpReadBlockProto::kSendChecksumsFieldNumber;
const int OpReadBlockProto::kCachingStrategyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpReadBlockProto::OpReadBlockProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpReadBlockProto)
}

void OpReadBlockProto::InitAsDefaultInstance() {
  header_ = const_cast< ::ClientOperationHeaderProto*>(&::ClientOperationHeaderProto::default_instance());
  cachingstrategy_ = const_cast< ::CachingStrategyProto*>(&::CachingStrategyProto::default_instance());
}

OpReadBlockProto::OpReadBlockProto(const OpReadBlockProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpReadBlockProto)
}

void OpReadBlockProto::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  offset_ = GOOGLE_ULONGLONG(0);
  len_ = GOOGLE_ULONGLONG(0);
  sendchecksums_ = true;
  cachingstrategy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpReadBlockProto::~OpReadBlockProto() {
  // @@protoc_insertion_point(destructor:OpReadBlockProto)
  SharedDtor();
}

void OpReadBlockProto::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete cachingstrategy_;
  }
}

void OpReadBlockProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpReadBlockProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpReadBlockProto_descriptor_;
}

const OpReadBlockProto& OpReadBlockProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datanode_2eproto();
  return *default_instance_;
}

OpReadBlockProto* OpReadBlockProto::default_instance_ = NULL;

OpReadBlockProto* OpReadBlockProto::New(::google::protobuf::Arena* arena) const {
  OpReadBlockProto* n = new OpReadBlockProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpReadBlockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:OpReadBlockProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OpReadBlockProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpReadBlockProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(offset_, len_);
    if (has_header()) {
      if (header_ != NULL) header_->::ClientOperationHeaderProto::Clear();
    }
    sendchecksums_ = true;
    if (has_cachingstrategy()) {
      if (cachingstrategy_ != NULL) cachingstrategy_->::CachingStrategyProto::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpReadBlockProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpReadBlockProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ClientOperationHeaderProto header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint64 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // required uint64 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sendChecksums;
        break;
      }

      // optional bool sendChecksums = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_sendChecksums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sendchecksums_)));
          set_has_sendchecksums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cachingStrategy;
        break;
      }

      // optional .CachingStrategyProto cachingStrategy = 5;
      case 5: {
        if (tag == 42) {
         parse_cachingStrategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cachingstrategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpReadBlockProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpReadBlockProto)
  return false;
#undef DO_
}

void OpReadBlockProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpReadBlockProto)
  // required .ClientOperationHeaderProto header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // required uint64 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->len(), output);
  }

  // optional bool sendChecksums = 4 [default = true];
  if (has_sendchecksums()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sendchecksums(), output);
  }

  // optional .CachingStrategyProto cachingStrategy = 5;
  if (has_cachingstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cachingstrategy_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpReadBlockProto)
}

::google::protobuf::uint8* OpReadBlockProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpReadBlockProto)
  // required .ClientOperationHeaderProto header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // required uint64 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->len(), target);
  }

  // optional bool sendChecksums = 4 [default = true];
  if (has_sendchecksums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sendchecksums(), target);
  }

  // optional .CachingStrategyProto cachingStrategy = 5;
  if (has_cachingstrategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cachingstrategy_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpReadBlockProto)
  return target;
}

int OpReadBlockProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OpReadBlockProto)
  int total_size = 0;

  if (has_header()) {
    // required .ClientOperationHeaderProto header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_offset()) {
    // required uint64 offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  if (has_len()) {
    // required uint64 len = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->len());
  }

  return total_size;
}
int OpReadBlockProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:OpReadBlockProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ClientOperationHeaderProto header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required uint64 offset = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());

    // required uint64 len = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->len());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional bool sendChecksums = 4 [default = true];
    if (has_sendchecksums()) {
      total_size += 1 + 1;
    }

    // optional .CachingStrategyProto cachingStrategy = 5;
    if (has_cachingstrategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cachingstrategy_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpReadBlockProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpReadBlockProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpReadBlockProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpReadBlockProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpReadBlockProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpReadBlockProto)
    MergeFrom(*source);
  }
}

void OpReadBlockProto::MergeFrom(const OpReadBlockProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpReadBlockProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ClientOperationHeaderProto::MergeFrom(from.header());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_sendchecksums()) {
      set_sendchecksums(from.sendchecksums());
    }
    if (from.has_cachingstrategy()) {
      mutable_cachingstrategy()->::CachingStrategyProto::MergeFrom(from.cachingstrategy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpReadBlockProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpReadBlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpReadBlockProto::CopyFrom(const OpReadBlockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpReadBlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReadBlockProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void OpReadBlockProto::Swap(OpReadBlockProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpReadBlockProto::InternalSwap(OpReadBlockProto* other) {
  std::swap(header_, other->header_);
  std::swap(offset_, other->offset_);
  std::swap(len_, other->len_);
  std::swap(sendchecksums_, other->sendchecksums_);
  std::swap(cachingstrategy_, other->cachingstrategy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpReadBlockProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpReadBlockProto_descriptor_;
  metadata.reflection = OpReadBlockProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpReadBlockProto

// required .ClientOperationHeaderProto header = 1;
bool OpReadBlockProto::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpReadBlockProto::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void OpReadBlockProto::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpReadBlockProto::clear_header() {
  if (header_ != NULL) header_->::ClientOperationHeaderProto::Clear();
  clear_has_header();
}
const ::ClientOperationHeaderProto& OpReadBlockProto::header() const {
  // @@protoc_insertion_point(field_get:OpReadBlockProto.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::ClientOperationHeaderProto* OpReadBlockProto::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ClientOperationHeaderProto;
  }
  // @@protoc_insertion_point(field_mutable:OpReadBlockProto.header)
  return header_;
}
::ClientOperationHeaderProto* OpReadBlockProto::release_header() {
  // @@protoc_insertion_point(field_release:OpReadBlockProto.header)
  clear_has_header();
  ::ClientOperationHeaderProto* temp = header_;
  header_ = NULL;
  return temp;
}
void OpReadBlockProto::set_allocated_header(::ClientOperationHeaderProto* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:OpReadBlockProto.header)
}

// required uint64 offset = 2;
bool OpReadBlockProto::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpReadBlockProto::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void OpReadBlockProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpReadBlockProto::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
 ::google::protobuf::uint64 OpReadBlockProto::offset() const {
  // @@protoc_insertion_point(field_get:OpReadBlockProto.offset)
  return offset_;
}
 void OpReadBlockProto::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:OpReadBlockProto.offset)
}

// required uint64 len = 3;
bool OpReadBlockProto::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpReadBlockProto::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
void OpReadBlockProto::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpReadBlockProto::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
  clear_has_len();
}
 ::google::protobuf::uint64 OpReadBlockProto::len() const {
  // @@protoc_insertion_point(field_get:OpReadBlockProto.len)
  return len_;
}
 void OpReadBlockProto::set_len(::google::protobuf::uint64 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:OpReadBlockProto.len)
}

// optional bool sendChecksums = 4 [default = true];
bool OpReadBlockProto::has_sendchecksums() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpReadBlockProto::set_has_sendchecksums() {
  _has_bits_[0] |= 0x00000008u;
}
void OpReadBlockProto::clear_has_sendchecksums() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpReadBlockProto::clear_sendchecksums() {
  sendchecksums_ = true;
  clear_has_sendchecksums();
}
 bool OpReadBlockProto::sendchecksums() const {
  // @@protoc_insertion_point(field_get:OpReadBlockProto.sendChecksums)
  return sendchecksums_;
}
 void OpReadBlockProto::set_sendchecksums(bool value) {
  set_has_sendchecksums();
  sendchecksums_ = value;
  // @@protoc_insertion_point(field_set:OpReadBlockProto.sendChecksums)
}

// optional .CachingStrategyProto cachingStrategy = 5;
bool OpReadBlockProto::has_cachingstrategy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpReadBlockProto::set_has_cachingstrategy() {
  _has_bits_[0] |= 0x00000010u;
}
void OpReadBlockProto::clear_has_cachingstrategy() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpReadBlockProto::clear_cachingstrategy() {
  if (cachingstrategy_ != NULL) cachingstrategy_->::CachingStrategyProto::Clear();
  clear_has_cachingstrategy();
}
const ::CachingStrategyProto& OpReadBlockProto::cachingstrategy() const {
  // @@protoc_insertion_point(field_get:OpReadBlockProto.cachingStrategy)
  return cachingstrategy_ != NULL ? *cachingstrategy_ : *default_instance_->cachingstrategy_;
}
::CachingStrategyProto* OpReadBlockProto::mutable_cachingstrategy() {
  set_has_cachingstrategy();
  if (cachingstrategy_ == NULL) {
    cachingstrategy_ = new ::CachingStrategyProto;
  }
  // @@protoc_insertion_point(field_mutable:OpReadBlockProto.cachingStrategy)
  return cachingstrategy_;
}
::CachingStrategyProto* OpReadBlockProto::release_cachingstrategy() {
  // @@protoc_insertion_point(field_release:OpReadBlockProto.cachingStrategy)
  clear_has_cachingstrategy();
  ::CachingStrategyProto* temp = cachingstrategy_;
  cachingstrategy_ = NULL;
  return temp;
}
void OpReadBlockProto::set_allocated_cachingstrategy(::CachingStrategyProto* cachingstrategy) {
  delete cachingstrategy_;
  cachingstrategy_ = cachingstrategy;
  if (cachingstrategy) {
    set_has_cachingstrategy();
  } else {
    clear_has_cachingstrategy();
  }
  // @@protoc_insertion_point(field_set_allocated:OpReadBlockProto.cachingStrategy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHeaderProto::kOffsetInBlockFieldNumber;
const int PacketHeaderProto::kSeqnoFieldNumber;
const int PacketHeaderProto::kLastPacketInBlockFieldNumber;
const int PacketHeaderProto::kDataLenFieldNumber;
const int PacketHeaderProto::kSyncBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHeaderProto::PacketHeaderProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PacketHeaderProto)
}

void PacketHeaderProto::InitAsDefaultInstance() {
}

PacketHeaderProto::PacketHeaderProto(const PacketHeaderProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PacketHeaderProto)
}

void PacketHeaderProto::SharedCtor() {
  _cached_size_ = 0;
  offsetinblock_ = GOOGLE_LONGLONG(0);
  seqno_ = GOOGLE_LONGLONG(0);
  lastpacketinblock_ = false;
  datalen_ = 0;
  syncblock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHeaderProto::~PacketHeaderProto() {
  // @@protoc_insertion_point(destructor:PacketHeaderProto)
  SharedDtor();
}

void PacketHeaderProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PacketHeaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeaderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeaderProto_descriptor_;
}

const PacketHeaderProto& PacketHeaderProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datanode_2eproto();
  return *default_instance_;
}

PacketHeaderProto* PacketHeaderProto::default_instance_ = NULL;

PacketHeaderProto* PacketHeaderProto::New(::google::protobuf::Arena* arena) const {
  PacketHeaderProto* n = new PacketHeaderProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHeaderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PacketHeaderProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PacketHeaderProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketHeaderProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(offsetinblock_, syncblock_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PacketHeaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PacketHeaderProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 offsetInBlock = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &offsetinblock_)));
          set_has_offsetinblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_seqno;
        break;
      }

      // required sfixed64 seqno = 2;
      case 2: {
        if (tag == 17) {
         parse_seqno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastPacketInBlock;
        break;
      }

      // required bool lastPacketInBlock = 3;
      case 3: {
        if (tag == 24) {
         parse_lastPacketInBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastpacketinblock_)));
          set_has_lastpacketinblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_dataLen;
        break;
      }

      // required sfixed32 dataLen = 4;
      case 4: {
        if (tag == 37) {
         parse_dataLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &datalen_)));
          set_has_datalen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_syncBlock;
        break;
      }

      // optional bool syncBlock = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_syncBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &syncblock_)));
          set_has_syncblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PacketHeaderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PacketHeaderProto)
  return false;
#undef DO_
}

void PacketHeaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PacketHeaderProto)
  // required sfixed64 offsetInBlock = 1;
  if (has_offsetinblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->offsetinblock(), output);
  }

  // required sfixed64 seqno = 2;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->seqno(), output);
  }

  // required bool lastPacketInBlock = 3;
  if (has_lastpacketinblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lastpacketinblock(), output);
  }

  // required sfixed32 dataLen = 4;
  if (has_datalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->datalen(), output);
  }

  // optional bool syncBlock = 5 [default = false];
  if (has_syncblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->syncblock(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PacketHeaderProto)
}

::google::protobuf::uint8* PacketHeaderProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketHeaderProto)
  // required sfixed64 offsetInBlock = 1;
  if (has_offsetinblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->offsetinblock(), target);
  }

  // required sfixed64 seqno = 2;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->seqno(), target);
  }

  // required bool lastPacketInBlock = 3;
  if (has_lastpacketinblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lastpacketinblock(), target);
  }

  // required sfixed32 dataLen = 4;
  if (has_datalen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->datalen(), target);
  }

  // optional bool syncBlock = 5 [default = false];
  if (has_syncblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->syncblock(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketHeaderProto)
  return target;
}

int PacketHeaderProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:PacketHeaderProto)
  int total_size = 0;

  if (has_offsetinblock()) {
    // required sfixed64 offsetInBlock = 1;
    total_size += 1 + 8;
  }

  if (has_seqno()) {
    // required sfixed64 seqno = 2;
    total_size += 1 + 8;
  }

  if (has_lastpacketinblock()) {
    // required bool lastPacketInBlock = 3;
    total_size += 1 + 1;
  }

  if (has_datalen()) {
    // required sfixed32 dataLen = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int PacketHeaderProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PacketHeaderProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required sfixed64 offsetInBlock = 1;
    total_size += 1 + 8;

    // required sfixed64 seqno = 2;
    total_size += 1 + 8;

    // required bool lastPacketInBlock = 3;
    total_size += 1 + 1;

    // required sfixed32 dataLen = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool syncBlock = 5 [default = false];
  if (has_syncblock()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeaderProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PacketHeaderProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PacketHeaderProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHeaderProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PacketHeaderProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PacketHeaderProto)
    MergeFrom(*source);
  }
}

void PacketHeaderProto::MergeFrom(const PacketHeaderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PacketHeaderProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offsetinblock()) {
      set_offsetinblock(from.offsetinblock());
    }
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_lastpacketinblock()) {
      set_lastpacketinblock(from.lastpacketinblock());
    }
    if (from.has_datalen()) {
      set_datalen(from.datalen());
    }
    if (from.has_syncblock()) {
      set_syncblock(from.syncblock());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PacketHeaderProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PacketHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeaderProto::CopyFrom(const PacketHeaderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PacketHeaderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeaderProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PacketHeaderProto::Swap(PacketHeaderProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHeaderProto::InternalSwap(PacketHeaderProto* other) {
  std::swap(offsetinblock_, other->offsetinblock_);
  std::swap(seqno_, other->seqno_);
  std::swap(lastpacketinblock_, other->lastpacketinblock_);
  std::swap(datalen_, other->datalen_);
  std::swap(syncblock_, other->syncblock_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketHeaderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeaderProto_descriptor_;
  metadata.reflection = PacketHeaderProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHeaderProto

// required sfixed64 offsetInBlock = 1;
bool PacketHeaderProto::has_offsetinblock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketHeaderProto::set_has_offsetinblock() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketHeaderProto::clear_has_offsetinblock() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketHeaderProto::clear_offsetinblock() {
  offsetinblock_ = GOOGLE_LONGLONG(0);
  clear_has_offsetinblock();
}
 ::google::protobuf::int64 PacketHeaderProto::offsetinblock() const {
  // @@protoc_insertion_point(field_get:PacketHeaderProto.offsetInBlock)
  return offsetinblock_;
}
 void PacketHeaderProto::set_offsetinblock(::google::protobuf::int64 value) {
  set_has_offsetinblock();
  offsetinblock_ = value;
  // @@protoc_insertion_point(field_set:PacketHeaderProto.offsetInBlock)
}

// required sfixed64 seqno = 2;
bool PacketHeaderProto::has_seqno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketHeaderProto::set_has_seqno() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketHeaderProto::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketHeaderProto::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
  clear_has_seqno();
}
 ::google::protobuf::int64 PacketHeaderProto::seqno() const {
  // @@protoc_insertion_point(field_get:PacketHeaderProto.seqno)
  return seqno_;
}
 void PacketHeaderProto::set_seqno(::google::protobuf::int64 value) {
  set_has_seqno();
  seqno_ = value;
  // @@protoc_insertion_point(field_set:PacketHeaderProto.seqno)
}

// required bool lastPacketInBlock = 3;
bool PacketHeaderProto::has_lastpacketinblock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketHeaderProto::set_has_lastpacketinblock() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketHeaderProto::clear_has_lastpacketinblock() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketHeaderProto::clear_lastpacketinblock() {
  lastpacketinblock_ = false;
  clear_has_lastpacketinblock();
}
 bool PacketHeaderProto::lastpacketinblock() const {
  // @@protoc_insertion_point(field_get:PacketHeaderProto.lastPacketInBlock)
  return lastpacketinblock_;
}
 void PacketHeaderProto::set_lastpacketinblock(bool value) {
  set_has_lastpacketinblock();
  lastpacketinblock_ = value;
  // @@protoc_insertion_point(field_set:PacketHeaderProto.lastPacketInBlock)
}

// required sfixed32 dataLen = 4;
bool PacketHeaderProto::has_datalen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketHeaderProto::set_has_datalen() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketHeaderProto::clear_has_datalen() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketHeaderProto::clear_datalen() {
  datalen_ = 0;
  clear_has_datalen();
}
 ::google::protobuf::int32 PacketHeaderProto::datalen() const {
  // @@protoc_insertion_point(field_get:PacketHeaderProto.dataLen)
  return datalen_;
}
 void PacketHeaderProto::set_datalen(::google::protobuf::int32 value) {
  set_has_datalen();
  datalen_ = value;
  // @@protoc_insertion_point(field_set:PacketHeaderProto.dataLen)
}

// optional bool syncBlock = 5 [default = false];
bool PacketHeaderProto::has_syncblock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketHeaderProto::set_has_syncblock() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketHeaderProto::clear_has_syncblock() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketHeaderProto::clear_syncblock() {
  syncblock_ = false;
  clear_has_syncblock();
}
 bool PacketHeaderProto::syncblock() const {
  // @@protoc_insertion_point(field_get:PacketHeaderProto.syncBlock)
  return syncblock_;
}
 void PacketHeaderProto::set_syncblock(bool value) {
  set_has_syncblock();
  syncblock_ = value;
  // @@protoc_insertion_point(field_set:PacketHeaderProto.syncBlock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* OpWriteBlockProto_BlockConstructionStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpWriteBlockProto_BlockConstructionStage_descriptor_;
}
bool OpWriteBlockProto_BlockConstructionStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::PIPELINE_SETUP_APPEND;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::PIPELINE_SETUP_APPEND_RECOVERY;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::DATA_STREAMING;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::PIPELINE_SETUP_STREAMING_RECOVERY;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::PIPELINE_CLOSE;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::PIPELINE_CLOSE_RECOVERY;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::PIPELINE_SETUP_CREATE;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::TRANSFER_RBW;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::TRANSFER_FINALIZED;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::BlockConstructionStage_MIN;
const OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::BlockConstructionStage_MAX;
const int OpWriteBlockProto::BlockConstructionStage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpWriteBlockProto::kHeaderFieldNumber;
const int OpWriteBlockProto::kTargetsFieldNumber;
const int OpWriteBlockProto::kSourceFieldNumber;
const int OpWriteBlockProto::kStageFieldNumber;
const int OpWriteBlockProto::kPipelineSizeFieldNumber;
const int OpWriteBlockProto::kMinBytesRcvdFieldNumber;
const int OpWriteBlockProto::kMaxBytesRcvdFieldNumber;
const int OpWriteBlockProto::kLatestGenerationStampFieldNumber;
const int OpWriteBlockProto::kRequestedChecksumFieldNumber;
const int OpWriteBlockProto::kCachingStrategyFieldNumber;
const int OpWriteBlockProto::kStorageTypeFieldNumber;
const int OpWriteBlockProto::kTargetStorageTypesFieldNumber;
const int OpWriteBlockProto::kAllowLazyPersistFieldNumber;
const int OpWriteBlockProto::kPinningFieldNumber;
const int OpWriteBlockProto::kTargetPinningsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpWriteBlockProto::OpWriteBlockProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpWriteBlockProto)
}

void OpWriteBlockProto::InitAsDefaultInstance() {
  header_ = const_cast< ::ClientOperationHeaderProto*>(&::ClientOperationHeaderProto::default_instance());
  source_ = const_cast< ::DatanodeInfoProto*>(&::DatanodeInfoProto::default_instance());
  requestedchecksum_ = const_cast< ::ChecksumProto*>(&::ChecksumProto::default_instance());
  cachingstrategy_ = const_cast< ::CachingStrategyProto*>(&::CachingStrategyProto::default_instance());
}

OpWriteBlockProto::OpWriteBlockProto(const OpWriteBlockProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpWriteBlockProto)
}

void OpWriteBlockProto::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  source_ = NULL;
  stage_ = 0;
  pipelinesize_ = 0u;
  minbytesrcvd_ = GOOGLE_ULONGLONG(0);
  maxbytesrcvd_ = GOOGLE_ULONGLONG(0);
  latestgenerationstamp_ = GOOGLE_ULONGLONG(0);
  requestedchecksum_ = NULL;
  cachingstrategy_ = NULL;
  storagetype_ = 1;
  allowlazypersist_ = false;
  pinning_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpWriteBlockProto::~OpWriteBlockProto() {
  // @@protoc_insertion_point(destructor:OpWriteBlockProto)
  SharedDtor();
}

void OpWriteBlockProto::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete source_;
    delete requestedchecksum_;
    delete cachingstrategy_;
  }
}

void OpWriteBlockProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpWriteBlockProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpWriteBlockProto_descriptor_;
}

const OpWriteBlockProto& OpWriteBlockProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datanode_2eproto();
  return *default_instance_;
}

OpWriteBlockProto* OpWriteBlockProto::default_instance_ = NULL;

OpWriteBlockProto* OpWriteBlockProto::New(::google::protobuf::Arena* arena) const {
  OpWriteBlockProto* n = new OpWriteBlockProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpWriteBlockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:OpWriteBlockProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OpWriteBlockProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpWriteBlockProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(stage_, latestgenerationstamp_);
    if (has_header()) {
      if (header_ != NULL) header_->::ClientOperationHeaderProto::Clear();
    }
    if (has_source()) {
      if (source_ != NULL) source_->::DatanodeInfoProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 14080u) {
    ZR_(allowlazypersist_, pinning_);
    if (has_requestedchecksum()) {
      if (requestedchecksum_ != NULL) requestedchecksum_->::ChecksumProto::Clear();
    }
    if (has_cachingstrategy()) {
      if (cachingstrategy_ != NULL) cachingstrategy_->::CachingStrategyProto::Clear();
    }
    storagetype_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  targets_.Clear();
  targetstoragetypes_.Clear();
  targetpinnings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpWriteBlockProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpWriteBlockProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ClientOperationHeaderProto header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targets;
        break;
      }

      // repeated .DatanodeInfoProto targets = 2;
      case 2: {
        if (tag == 18) {
         parse_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_source;
        break;
      }

      // optional .DatanodeInfoProto source = 3;
      case 3: {
        if (tag == 26) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required .OpWriteBlockProto.BlockConstructionStage stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OpWriteBlockProto_BlockConstructionStage_IsValid(value)) {
            set_stage(static_cast< ::OpWriteBlockProto_BlockConstructionStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pipelineSize;
        break;
      }

      // required uint32 pipelineSize = 5;
      case 5: {
        if (tag == 40) {
         parse_pipelineSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pipelinesize_)));
          set_has_pipelinesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_minBytesRcvd;
        break;
      }

      // required uint64 minBytesRcvd = 6;
      case 6: {
        if (tag == 48) {
         parse_minBytesRcvd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minbytesrcvd_)));
          set_has_minbytesrcvd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxBytesRcvd;
        break;
      }

      // required uint64 maxBytesRcvd = 7;
      case 7: {
        if (tag == 56) {
         parse_maxBytesRcvd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxbytesrcvd_)));
          set_has_maxbytesrcvd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_latestGenerationStamp;
        break;
      }

      // required uint64 latestGenerationStamp = 8;
      case 8: {
        if (tag == 64) {
         parse_latestGenerationStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &latestgenerationstamp_)));
          set_has_latestgenerationstamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_requestedChecksum;
        break;
      }

      // required .ChecksumProto requestedChecksum = 9;
      case 9: {
        if (tag == 74) {
         parse_requestedChecksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestedchecksum()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cachingStrategy;
        break;
      }

      // optional .CachingStrategyProto cachingStrategy = 10;
      case 10: {
        if (tag == 82) {
         parse_cachingStrategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cachingstrategy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_storageType;
        break;
      }

      // optional .StorageTypeProto storageType = 11 [default = DISK];
      case 11: {
        if (tag == 88) {
         parse_storageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StorageTypeProto_IsValid(value)) {
            set_storagetype(static_cast< ::StorageTypeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_targetStorageTypes;
        break;
      }

      // repeated .StorageTypeProto targetStorageTypes = 12;
      case 12: {
        if (tag == 96) {
         parse_targetStorageTypes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StorageTypeProto_IsValid(value)) {
            add_targetstoragetypes(static_cast< ::StorageTypeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 12,
                 ::StorageTypeProto_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_targetstoragetypes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_targetStorageTypes;
        if (input->ExpectTag(104)) goto parse_allowLazyPersist;
        break;
      }

      // optional bool allowLazyPersist = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_allowLazyPersist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowlazypersist_)));
          set_has_allowlazypersist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pinning;
        break;
      }

      // optional bool pinning = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_pinning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pinning_)));
          set_has_pinning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_targetPinnings;
        break;
      }

      // repeated bool targetPinnings = 15;
      case 15: {
        if (tag == 120) {
         parse_targetPinnings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 120, input, this->mutable_targetpinnings())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_targetpinnings())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_targetPinnings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpWriteBlockProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpWriteBlockProto)
  return false;
#undef DO_
}

void OpWriteBlockProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpWriteBlockProto)
  // required .ClientOperationHeaderProto header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .DatanodeInfoProto targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targets(i), output);
  }

  // optional .DatanodeInfoProto source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->source_, output);
  }

  // required .OpWriteBlockProto.BlockConstructionStage stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stage(), output);
  }

  // required uint32 pipelineSize = 5;
  if (has_pipelinesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pipelinesize(), output);
  }

  // required uint64 minBytesRcvd = 6;
  if (has_minbytesrcvd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->minbytesrcvd(), output);
  }

  // required uint64 maxBytesRcvd = 7;
  if (has_maxbytesrcvd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->maxbytesrcvd(), output);
  }

  // required uint64 latestGenerationStamp = 8;
  if (has_latestgenerationstamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->latestgenerationstamp(), output);
  }

  // required .ChecksumProto requestedChecksum = 9;
  if (has_requestedchecksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->requestedchecksum_, output);
  }

  // optional .CachingStrategyProto cachingStrategy = 10;
  if (has_cachingstrategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cachingstrategy_, output);
  }

  // optional .StorageTypeProto storageType = 11 [default = DISK];
  if (has_storagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->storagetype(), output);
  }

  // repeated .StorageTypeProto targetStorageTypes = 12;
  for (int i = 0; i < this->targetstoragetypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->targetstoragetypes(i), output);
  }

  // optional bool allowLazyPersist = 13 [default = false];
  if (has_allowlazypersist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allowlazypersist(), output);
  }

  // optional bool pinning = 14 [default = false];
  if (has_pinning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->pinning(), output);
  }

  // repeated bool targetPinnings = 15;
  for (int i = 0; i < this->targetpinnings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      15, this->targetpinnings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpWriteBlockProto)
}

::google::protobuf::uint8* OpWriteBlockProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpWriteBlockProto)
  // required .ClientOperationHeaderProto header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .DatanodeInfoProto targets = 2;
  for (unsigned int i = 0, n = this->targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->targets(i), false, target);
  }

  // optional .DatanodeInfoProto source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->source_, false, target);
  }

  // required .OpWriteBlockProto.BlockConstructionStage stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->stage(), target);
  }

  // required uint32 pipelineSize = 5;
  if (has_pipelinesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pipelinesize(), target);
  }

  // required uint64 minBytesRcvd = 6;
  if (has_minbytesrcvd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->minbytesrcvd(), target);
  }

  // required uint64 maxBytesRcvd = 7;
  if (has_maxbytesrcvd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->maxbytesrcvd(), target);
  }

  // required uint64 latestGenerationStamp = 8;
  if (has_latestgenerationstamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->latestgenerationstamp(), target);
  }

  // required .ChecksumProto requestedChecksum = 9;
  if (has_requestedchecksum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->requestedchecksum_, false, target);
  }

  // optional .CachingStrategyProto cachingStrategy = 10;
  if (has_cachingstrategy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cachingstrategy_, false, target);
  }

  // optional .StorageTypeProto storageType = 11 [default = DISK];
  if (has_storagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->storagetype(), target);
  }

  // repeated .StorageTypeProto targetStorageTypes = 12;
  for (int i = 0; i < this->targetstoragetypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->targetstoragetypes(i), target);
  }

  // optional bool allowLazyPersist = 13 [default = false];
  if (has_allowlazypersist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allowlazypersist(), target);
  }

  // optional bool pinning = 14 [default = false];
  if (has_pinning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->pinning(), target);
  }

  // repeated bool targetPinnings = 15;
  for (int i = 0; i < this->targetpinnings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(15, this->targetpinnings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpWriteBlockProto)
  return target;
}

int OpWriteBlockProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OpWriteBlockProto)
  int total_size = 0;

  if (has_header()) {
    // required .ClientOperationHeaderProto header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_stage()) {
    // required .OpWriteBlockProto.BlockConstructionStage stage = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  if (has_pipelinesize()) {
    // required uint32 pipelineSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pipelinesize());
  }

  if (has_minbytesrcvd()) {
    // required uint64 minBytesRcvd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minbytesrcvd());
  }

  if (has_maxbytesrcvd()) {
    // required uint64 maxBytesRcvd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxbytesrcvd());
  }

  if (has_latestgenerationstamp()) {
    // required uint64 latestGenerationStamp = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->latestgenerationstamp());
  }

  if (has_requestedchecksum()) {
    // required .ChecksumProto requestedChecksum = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestedchecksum_);
  }

  return total_size;
}
int OpWriteBlockProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:OpWriteBlockProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001f9) ^ 0x000001f9) == 0) {  // All required fields are present.
    // required .ClientOperationHeaderProto header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required .OpWriteBlockProto.BlockConstructionStage stage = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());

    // required uint32 pipelineSize = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pipelinesize());

    // required uint64 minBytesRcvd = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->minbytesrcvd());

    // required uint64 maxBytesRcvd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->maxbytesrcvd());

    // required uint64 latestGenerationStamp = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->latestgenerationstamp());

    // required .ChecksumProto requestedChecksum = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->requestedchecksum_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .DatanodeInfoProto source = 3;
  if (has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  if (_has_bits_[9 / 32] & 13824u) {
    // optional .CachingStrategyProto cachingStrategy = 10;
    if (has_cachingstrategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cachingstrategy_);
    }

    // optional .StorageTypeProto storageType = 11 [default = DISK];
    if (has_storagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->storagetype());
    }

    // optional bool allowLazyPersist = 13 [default = false];
    if (has_allowlazypersist()) {
      total_size += 1 + 1;
    }

    // optional bool pinning = 14 [default = false];
    if (has_pinning()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DatanodeInfoProto targets = 2;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  // repeated .StorageTypeProto targetStorageTypes = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetstoragetypes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->targetstoragetypes(i));
    }
    total_size += 1 * this->targetstoragetypes_size() + data_size;
  }

  // repeated bool targetPinnings = 15;
  {
    int data_size = 0;
    data_size = 1 * this->targetpinnings_size();
    total_size += 1 * this->targetpinnings_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpWriteBlockProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OpWriteBlockProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OpWriteBlockProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpWriteBlockProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OpWriteBlockProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OpWriteBlockProto)
    MergeFrom(*source);
  }
}

void OpWriteBlockProto::MergeFrom(const OpWriteBlockProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OpWriteBlockProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  targets_.MergeFrom(from.targets_);
  targetstoragetypes_.MergeFrom(from.targetstoragetypes_);
  targetpinnings_.MergeFrom(from.targetpinnings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ClientOperationHeaderProto::MergeFrom(from.header());
    }
    if (from.has_source()) {
      mutable_source()->::DatanodeInfoProto::MergeFrom(from.source());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_pipelinesize()) {
      set_pipelinesize(from.pipelinesize());
    }
    if (from.has_minbytesrcvd()) {
      set_minbytesrcvd(from.minbytesrcvd());
    }
    if (from.has_maxbytesrcvd()) {
      set_maxbytesrcvd(from.maxbytesrcvd());
    }
    if (from.has_latestgenerationstamp()) {
      set_latestgenerationstamp(from.latestgenerationstamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_requestedchecksum()) {
      mutable_requestedchecksum()->::ChecksumProto::MergeFrom(from.requestedchecksum());
    }
    if (from.has_cachingstrategy()) {
      mutable_cachingstrategy()->::CachingStrategyProto::MergeFrom(from.cachingstrategy());
    }
    if (from.has_storagetype()) {
      set_storagetype(from.storagetype());
    }
    if (from.has_allowlazypersist()) {
      set_allowlazypersist(from.allowlazypersist());
    }
    if (from.has_pinning()) {
      set_pinning(from.pinning());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpWriteBlockProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OpWriteBlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpWriteBlockProto::CopyFrom(const OpWriteBlockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpWriteBlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpWriteBlockProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001f9) != 0x000001f9) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->targets())) return false;
  if (has_source()) {
    if (!this->source_->IsInitialized()) return false;
  }
  if (has_requestedchecksum()) {
    if (!this->requestedchecksum_->IsInitialized()) return false;
  }
  return true;
}

void OpWriteBlockProto::Swap(OpWriteBlockProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpWriteBlockProto::InternalSwap(OpWriteBlockProto* other) {
  std::swap(header_, other->header_);
  targets_.UnsafeArenaSwap(&other->targets_);
  std::swap(source_, other->source_);
  std::swap(stage_, other->stage_);
  std::swap(pipelinesize_, other->pipelinesize_);
  std::swap(minbytesrcvd_, other->minbytesrcvd_);
  std::swap(maxbytesrcvd_, other->maxbytesrcvd_);
  std::swap(latestgenerationstamp_, other->latestgenerationstamp_);
  std::swap(requestedchecksum_, other->requestedchecksum_);
  std::swap(cachingstrategy_, other->cachingstrategy_);
  std::swap(storagetype_, other->storagetype_);
  targetstoragetypes_.UnsafeArenaSwap(&other->targetstoragetypes_);
  std::swap(allowlazypersist_, other->allowlazypersist_);
  std::swap(pinning_, other->pinning_);
  targetpinnings_.UnsafeArenaSwap(&other->targetpinnings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpWriteBlockProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpWriteBlockProto_descriptor_;
  metadata.reflection = OpWriteBlockProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpWriteBlockProto

// required .ClientOperationHeaderProto header = 1;
bool OpWriteBlockProto::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpWriteBlockProto::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void OpWriteBlockProto::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpWriteBlockProto::clear_header() {
  if (header_ != NULL) header_->::ClientOperationHeaderProto::Clear();
  clear_has_header();
}
const ::ClientOperationHeaderProto& OpWriteBlockProto::header() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::ClientOperationHeaderProto* OpWriteBlockProto::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::ClientOperationHeaderProto;
  }
  // @@protoc_insertion_point(field_mutable:OpWriteBlockProto.header)
  return header_;
}
::ClientOperationHeaderProto* OpWriteBlockProto::release_header() {
  // @@protoc_insertion_point(field_release:OpWriteBlockProto.header)
  clear_has_header();
  ::ClientOperationHeaderProto* temp = header_;
  header_ = NULL;
  return temp;
}
void OpWriteBlockProto::set_allocated_header(::ClientOperationHeaderProto* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:OpWriteBlockProto.header)
}

// repeated .DatanodeInfoProto targets = 2;
int OpWriteBlockProto::targets_size() const {
  return targets_.size();
}
void OpWriteBlockProto::clear_targets() {
  targets_.Clear();
}
const ::DatanodeInfoProto& OpWriteBlockProto::targets(int index) const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.targets)
  return targets_.Get(index);
}
::DatanodeInfoProto* OpWriteBlockProto::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:OpWriteBlockProto.targets)
  return targets_.Mutable(index);
}
::DatanodeInfoProto* OpWriteBlockProto::add_targets() {
  // @@protoc_insertion_point(field_add:OpWriteBlockProto.targets)
  return targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::DatanodeInfoProto >*
OpWriteBlockProto::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:OpWriteBlockProto.targets)
  return &targets_;
}
const ::google::protobuf::RepeatedPtrField< ::DatanodeInfoProto >&
OpWriteBlockProto::targets() const {
  // @@protoc_insertion_point(field_list:OpWriteBlockProto.targets)
  return targets_;
}

// optional .DatanodeInfoProto source = 3;
bool OpWriteBlockProto::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpWriteBlockProto::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void OpWriteBlockProto::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpWriteBlockProto::clear_source() {
  if (source_ != NULL) source_->::DatanodeInfoProto::Clear();
  clear_has_source();
}
const ::DatanodeInfoProto& OpWriteBlockProto::source() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.source)
  return source_ != NULL ? *source_ : *default_instance_->source_;
}
::DatanodeInfoProto* OpWriteBlockProto::mutable_source() {
  set_has_source();
  if (source_ == NULL) {
    source_ = new ::DatanodeInfoProto;
  }
  // @@protoc_insertion_point(field_mutable:OpWriteBlockProto.source)
  return source_;
}
::DatanodeInfoProto* OpWriteBlockProto::release_source() {
  // @@protoc_insertion_point(field_release:OpWriteBlockProto.source)
  clear_has_source();
  ::DatanodeInfoProto* temp = source_;
  source_ = NULL;
  return temp;
}
void OpWriteBlockProto::set_allocated_source(::DatanodeInfoProto* source) {
  delete source_;
  source_ = source;
  if (source) {
    set_has_source();
  } else {
    clear_has_source();
  }
  // @@protoc_insertion_point(field_set_allocated:OpWriteBlockProto.source)
}

// required .OpWriteBlockProto.BlockConstructionStage stage = 4;
bool OpWriteBlockProto::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpWriteBlockProto::set_has_stage() {
  _has_bits_[0] |= 0x00000008u;
}
void OpWriteBlockProto::clear_has_stage() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpWriteBlockProto::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
 ::OpWriteBlockProto_BlockConstructionStage OpWriteBlockProto::stage() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.stage)
  return static_cast< ::OpWriteBlockProto_BlockConstructionStage >(stage_);
}
 void OpWriteBlockProto::set_stage(::OpWriteBlockProto_BlockConstructionStage value) {
  assert(::OpWriteBlockProto_BlockConstructionStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.stage)
}

// required uint32 pipelineSize = 5;
bool OpWriteBlockProto::has_pipelinesize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpWriteBlockProto::set_has_pipelinesize() {
  _has_bits_[0] |= 0x00000010u;
}
void OpWriteBlockProto::clear_has_pipelinesize() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpWriteBlockProto::clear_pipelinesize() {
  pipelinesize_ = 0u;
  clear_has_pipelinesize();
}
 ::google::protobuf::uint32 OpWriteBlockProto::pipelinesize() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.pipelineSize)
  return pipelinesize_;
}
 void OpWriteBlockProto::set_pipelinesize(::google::protobuf::uint32 value) {
  set_has_pipelinesize();
  pipelinesize_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.pipelineSize)
}

// required uint64 minBytesRcvd = 6;
bool OpWriteBlockProto::has_minbytesrcvd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpWriteBlockProto::set_has_minbytesrcvd() {
  _has_bits_[0] |= 0x00000020u;
}
void OpWriteBlockProto::clear_has_minbytesrcvd() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpWriteBlockProto::clear_minbytesrcvd() {
  minbytesrcvd_ = GOOGLE_ULONGLONG(0);
  clear_has_minbytesrcvd();
}
 ::google::protobuf::uint64 OpWriteBlockProto::minbytesrcvd() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.minBytesRcvd)
  return minbytesrcvd_;
}
 void OpWriteBlockProto::set_minbytesrcvd(::google::protobuf::uint64 value) {
  set_has_minbytesrcvd();
  minbytesrcvd_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.minBytesRcvd)
}

// required uint64 maxBytesRcvd = 7;
bool OpWriteBlockProto::has_maxbytesrcvd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpWriteBlockProto::set_has_maxbytesrcvd() {
  _has_bits_[0] |= 0x00000040u;
}
void OpWriteBlockProto::clear_has_maxbytesrcvd() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpWriteBlockProto::clear_maxbytesrcvd() {
  maxbytesrcvd_ = GOOGLE_ULONGLONG(0);
  clear_has_maxbytesrcvd();
}
 ::google::protobuf::uint64 OpWriteBlockProto::maxbytesrcvd() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.maxBytesRcvd)
  return maxbytesrcvd_;
}
 void OpWriteBlockProto::set_maxbytesrcvd(::google::protobuf::uint64 value) {
  set_has_maxbytesrcvd();
  maxbytesrcvd_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.maxBytesRcvd)
}

// required uint64 latestGenerationStamp = 8;
bool OpWriteBlockProto::has_latestgenerationstamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpWriteBlockProto::set_has_latestgenerationstamp() {
  _has_bits_[0] |= 0x00000080u;
}
void OpWriteBlockProto::clear_has_latestgenerationstamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpWriteBlockProto::clear_latestgenerationstamp() {
  latestgenerationstamp_ = GOOGLE_ULONGLONG(0);
  clear_has_latestgenerationstamp();
}
 ::google::protobuf::uint64 OpWriteBlockProto::latestgenerationstamp() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.latestGenerationStamp)
  return latestgenerationstamp_;
}
 void OpWriteBlockProto::set_latestgenerationstamp(::google::protobuf::uint64 value) {
  set_has_latestgenerationstamp();
  latestgenerationstamp_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.latestGenerationStamp)
}

// required .ChecksumProto requestedChecksum = 9;
bool OpWriteBlockProto::has_requestedchecksum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpWriteBlockProto::set_has_requestedchecksum() {
  _has_bits_[0] |= 0x00000100u;
}
void OpWriteBlockProto::clear_has_requestedchecksum() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpWriteBlockProto::clear_requestedchecksum() {
  if (requestedchecksum_ != NULL) requestedchecksum_->::ChecksumProto::Clear();
  clear_has_requestedchecksum();
}
const ::ChecksumProto& OpWriteBlockProto::requestedchecksum() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.requestedChecksum)
  return requestedchecksum_ != NULL ? *requestedchecksum_ : *default_instance_->requestedchecksum_;
}
::ChecksumProto* OpWriteBlockProto::mutable_requestedchecksum() {
  set_has_requestedchecksum();
  if (requestedchecksum_ == NULL) {
    requestedchecksum_ = new ::ChecksumProto;
  }
  // @@protoc_insertion_point(field_mutable:OpWriteBlockProto.requestedChecksum)
  return requestedchecksum_;
}
::ChecksumProto* OpWriteBlockProto::release_requestedchecksum() {
  // @@protoc_insertion_point(field_release:OpWriteBlockProto.requestedChecksum)
  clear_has_requestedchecksum();
  ::ChecksumProto* temp = requestedchecksum_;
  requestedchecksum_ = NULL;
  return temp;
}
void OpWriteBlockProto::set_allocated_requestedchecksum(::ChecksumProto* requestedchecksum) {
  delete requestedchecksum_;
  requestedchecksum_ = requestedchecksum;
  if (requestedchecksum) {
    set_has_requestedchecksum();
  } else {
    clear_has_requestedchecksum();
  }
  // @@protoc_insertion_point(field_set_allocated:OpWriteBlockProto.requestedChecksum)
}

// optional .CachingStrategyProto cachingStrategy = 10;
bool OpWriteBlockProto::has_cachingstrategy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpWriteBlockProto::set_has_cachingstrategy() {
  _has_bits_[0] |= 0x00000200u;
}
void OpWriteBlockProto::clear_has_cachingstrategy() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpWriteBlockProto::clear_cachingstrategy() {
  if (cachingstrategy_ != NULL) cachingstrategy_->::CachingStrategyProto::Clear();
  clear_has_cachingstrategy();
}
const ::CachingStrategyProto& OpWriteBlockProto::cachingstrategy() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.cachingStrategy)
  return cachingstrategy_ != NULL ? *cachingstrategy_ : *default_instance_->cachingstrategy_;
}
::CachingStrategyProto* OpWriteBlockProto::mutable_cachingstrategy() {
  set_has_cachingstrategy();
  if (cachingstrategy_ == NULL) {
    cachingstrategy_ = new ::CachingStrategyProto;
  }
  // @@protoc_insertion_point(field_mutable:OpWriteBlockProto.cachingStrategy)
  return cachingstrategy_;
}
::CachingStrategyProto* OpWriteBlockProto::release_cachingstrategy() {
  // @@protoc_insertion_point(field_release:OpWriteBlockProto.cachingStrategy)
  clear_has_cachingstrategy();
  ::CachingStrategyProto* temp = cachingstrategy_;
  cachingstrategy_ = NULL;
  return temp;
}
void OpWriteBlockProto::set_allocated_cachingstrategy(::CachingStrategyProto* cachingstrategy) {
  delete cachingstrategy_;
  cachingstrategy_ = cachingstrategy;
  if (cachingstrategy) {
    set_has_cachingstrategy();
  } else {
    clear_has_cachingstrategy();
  }
  // @@protoc_insertion_point(field_set_allocated:OpWriteBlockProto.cachingStrategy)
}

// optional .StorageTypeProto storageType = 11 [default = DISK];
bool OpWriteBlockProto::has_storagetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OpWriteBlockProto::set_has_storagetype() {
  _has_bits_[0] |= 0x00000400u;
}
void OpWriteBlockProto::clear_has_storagetype() {
  _has_bits_[0] &= ~0x00000400u;
}
void OpWriteBlockProto::clear_storagetype() {
  storagetype_ = 1;
  clear_has_storagetype();
}
 ::StorageTypeProto OpWriteBlockProto::storagetype() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.storageType)
  return static_cast< ::StorageTypeProto >(storagetype_);
}
 void OpWriteBlockProto::set_storagetype(::StorageTypeProto value) {
  assert(::StorageTypeProto_IsValid(value));
  set_has_storagetype();
  storagetype_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.storageType)
}

// repeated .StorageTypeProto targetStorageTypes = 12;
int OpWriteBlockProto::targetstoragetypes_size() const {
  return targetstoragetypes_.size();
}
void OpWriteBlockProto::clear_targetstoragetypes() {
  targetstoragetypes_.Clear();
}
 ::StorageTypeProto OpWriteBlockProto::targetstoragetypes(int index) const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.targetStorageTypes)
  return static_cast< ::StorageTypeProto >(targetstoragetypes_.Get(index));
}
 void OpWriteBlockProto::set_targetstoragetypes(int index, ::StorageTypeProto value) {
  assert(::StorageTypeProto_IsValid(value));
  targetstoragetypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.targetStorageTypes)
}
 void OpWriteBlockProto::add_targetstoragetypes(::StorageTypeProto value) {
  assert(::StorageTypeProto_IsValid(value));
  targetstoragetypes_.Add(value);
  // @@protoc_insertion_point(field_add:OpWriteBlockProto.targetStorageTypes)
}
 const ::google::protobuf::RepeatedField<int>&
OpWriteBlockProto::targetstoragetypes() const {
  // @@protoc_insertion_point(field_list:OpWriteBlockProto.targetStorageTypes)
  return targetstoragetypes_;
}
 ::google::protobuf::RepeatedField<int>*
OpWriteBlockProto::mutable_targetstoragetypes() {
  // @@protoc_insertion_point(field_mutable_list:OpWriteBlockProto.targetStorageTypes)
  return &targetstoragetypes_;
}

// optional bool allowLazyPersist = 13 [default = false];
bool OpWriteBlockProto::has_allowlazypersist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OpWriteBlockProto::set_has_allowlazypersist() {
  _has_bits_[0] |= 0x00001000u;
}
void OpWriteBlockProto::clear_has_allowlazypersist() {
  _has_bits_[0] &= ~0x00001000u;
}
void OpWriteBlockProto::clear_allowlazypersist() {
  allowlazypersist_ = false;
  clear_has_allowlazypersist();
}
 bool OpWriteBlockProto::allowlazypersist() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.allowLazyPersist)
  return allowlazypersist_;
}
 void OpWriteBlockProto::set_allowlazypersist(bool value) {
  set_has_allowlazypersist();
  allowlazypersist_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.allowLazyPersist)
}

// optional bool pinning = 14 [default = false];
bool OpWriteBlockProto::has_pinning() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OpWriteBlockProto::set_has_pinning() {
  _has_bits_[0] |= 0x00002000u;
}
void OpWriteBlockProto::clear_has_pinning() {
  _has_bits_[0] &= ~0x00002000u;
}
void OpWriteBlockProto::clear_pinning() {
  pinning_ = false;
  clear_has_pinning();
}
 bool OpWriteBlockProto::pinning() const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.pinning)
  return pinning_;
}
 void OpWriteBlockProto::set_pinning(bool value) {
  set_has_pinning();
  pinning_ = value;
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.pinning)
}

// repeated bool targetPinnings = 15;
int OpWriteBlockProto::targetpinnings_size() const {
  return targetpinnings_.size();
}
void OpWriteBlockProto::clear_targetpinnings() {
  targetpinnings_.Clear();
}
 bool OpWriteBlockProto::targetpinnings(int index) const {
  // @@protoc_insertion_point(field_get:OpWriteBlockProto.targetPinnings)
  return targetpinnings_.Get(index);
}
 void OpWriteBlockProto::set_targetpinnings(int index, bool value) {
  targetpinnings_.Set(index, value);
  // @@protoc_insertion_point(field_set:OpWriteBlockProto.targetPinnings)
}
 void OpWriteBlockProto::add_targetpinnings(bool value) {
  targetpinnings_.Add(value);
  // @@protoc_insertion_point(field_add:OpWriteBlockProto.targetPinnings)
}
 const ::google::protobuf::RepeatedField< bool >&
OpWriteBlockProto::targetpinnings() const {
  // @@protoc_insertion_point(field_list:OpWriteBlockProto.targetPinnings)
  return targetpinnings_;
}
 ::google::protobuf::RepeatedField< bool >*
OpWriteBlockProto::mutable_targetpinnings() {
  // @@protoc_insertion_point(field_mutable_list:OpWriteBlockProto.targetPinnings)
  return &targetpinnings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PipelineAckProto::kSeqnoFieldNumber;
const int PipelineAckProto::kReplyFieldNumber;
const int PipelineAckProto::kDownstreamAckTimeNanosFieldNumber;
const int PipelineAckProto::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PipelineAckProto::PipelineAckProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PipelineAckProto)
}

void PipelineAckProto::InitAsDefaultInstance() {
}

PipelineAckProto::PipelineAckProto(const PipelineAckProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PipelineAckProto)
}

void PipelineAckProto::SharedCtor() {
  _cached_size_ = 0;
  seqno_ = GOOGLE_LONGLONG(0);
  downstreamacktimenanos_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PipelineAckProto::~PipelineAckProto() {
  // @@protoc_insertion_point(destructor:PipelineAckProto)
  SharedDtor();
}

void PipelineAckProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PipelineAckProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PipelineAckProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PipelineAckProto_descriptor_;
}

const PipelineAckProto& PipelineAckProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datanode_2eproto();
  return *default_instance_;
}

PipelineAckProto* PipelineAckProto::default_instance_ = NULL;

PipelineAckProto* PipelineAckProto::New(::google::protobuf::Arena* arena) const {
  PipelineAckProto* n = new PipelineAckProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PipelineAckProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PipelineAckProto)
  if (_has_bits_[0 / 32] & 5u) {
    seqno_ = GOOGLE_LONGLONG(0);
    downstreamacktimenanos_ = GOOGLE_ULONGLONG(0);
  }
  reply_.Clear();
  flag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PipelineAckProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PipelineAckProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 seqno = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &seqno_)));
          set_has_seqno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reply;
        break;
      }

      // repeated .Status reply = 2;
      case 2: {
        if (tag == 16) {
         parse_reply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Status_IsValid(value)) {
            add_reply(static_cast< ::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::Status_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_reply())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reply;
        if (input->ExpectTag(24)) goto parse_downstreamAckTimeNanos;
        break;
      }

      // optional uint64 downstreamAckTimeNanos = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_downstreamAckTimeNanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &downstreamacktimenanos_)));
          set_has_downstreamacktimenanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_flag;
        break;
      }

      // repeated uint32 flag = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flag())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_flag())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PipelineAckProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PipelineAckProto)
  return false;
#undef DO_
}

void PipelineAckProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PipelineAckProto)
  // required sint64 seqno = 1;
  if (has_seqno()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->seqno(), output);
  }

  // repeated .Status reply = 2;
  for (int i = 0; i < this->reply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reply(i), output);
  }

  // optional uint64 downstreamAckTimeNanos = 3 [default = 0];
  if (has_downstreamacktimenanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->downstreamacktimenanos(), output);
  }

  // repeated uint32 flag = 4 [packed = true];
  if (this->flag_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_flag_cached_byte_size_);
  }
  for (int i = 0; i < this->flag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->flag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PipelineAckProto)
}

::google::protobuf::uint8* PipelineAckProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PipelineAckProto)
  // required sint64 seqno = 1;
  if (has_seqno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->seqno(), target);
  }

  // repeated .Status reply = 2;
  for (int i = 0; i < this->reply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reply(i), target);
  }

  // optional uint64 downstreamAckTimeNanos = 3 [default = 0];
  if (has_downstreamacktimenanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->downstreamacktimenanos(), target);
  }

  // repeated uint32 flag = 4 [packed = true];
  if (this->flag_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _flag_cached_byte_size_, target);
  }
  for (int i = 0; i < this->flag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->flag(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PipelineAckProto)
  return target;
}

int PipelineAckProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PipelineAckProto)
  int total_size = 0;

  // required sint64 seqno = 1;
  if (has_seqno()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->seqno());
  }
  // optional uint64 downstreamAckTimeNanos = 3 [default = 0];
  if (has_downstreamacktimenanos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->downstreamacktimenanos());
  }

  // repeated .Status reply = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reply_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->reply(i));
    }
    total_size += 1 * this->reply_size() + data_size;
  }

  // repeated uint32 flag = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->flag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->flag(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _flag_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PipelineAckProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PipelineAckProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PipelineAckProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PipelineAckProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PipelineAckProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PipelineAckProto)
    MergeFrom(*source);
  }
}

void PipelineAckProto::MergeFrom(const PipelineAckProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PipelineAckProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  reply_.MergeFrom(from.reply_);
  flag_.MergeFrom(from.flag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seqno()) {
      set_seqno(from.seqno());
    }
    if (from.has_downstreamacktimenanos()) {
      set_downstreamacktimenanos(from.downstreamacktimenanos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PipelineAckProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PipelineAckProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PipelineAckProto::CopyFrom(const PipelineAckProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PipelineAckProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineAckProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PipelineAckProto::Swap(PipelineAckProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PipelineAckProto::InternalSwap(PipelineAckProto* other) {
  std::swap(seqno_, other->seqno_);
  reply_.UnsafeArenaSwap(&other->reply_);
  std::swap(downstreamacktimenanos_, other->downstreamacktimenanos_);
  flag_.UnsafeArenaSwap(&other->flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PipelineAckProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PipelineAckProto_descriptor_;
  metadata.reflection = PipelineAckProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PipelineAckProto

// required sint64 seqno = 1;
bool PipelineAckProto::has_seqno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PipelineAckProto::set_has_seqno() {
  _has_bits_[0] |= 0x00000001u;
}
void PipelineAckProto::clear_has_seqno() {
  _has_bits_[0] &= ~0x00000001u;
}
void PipelineAckProto::clear_seqno() {
  seqno_ = GOOGLE_LONGLONG(0);
  clear_has_seqno();
}
 ::google::protobuf::int64 PipelineAckProto::seqno() const {
  // @@protoc_insertion_point(field_get:PipelineAckProto.seqno)
  return seqno_;
}
 void PipelineAckProto::set_seqno(::google::protobuf::int64 value) {
  set_has_seqno();
  seqno_ = value;
  // @@protoc_insertion_point(field_set:PipelineAckProto.seqno)
}

// repeated .Status reply = 2;
int PipelineAckProto::reply_size() const {
  return reply_.size();
}
void PipelineAckProto::clear_reply() {
  reply_.Clear();
}
 ::Status PipelineAckProto::reply(int index) const {
  // @@protoc_insertion_point(field_get:PipelineAckProto.reply)
  return static_cast< ::Status >(reply_.Get(index));
}
 void PipelineAckProto::set_reply(int index, ::Status value) {
  assert(::Status_IsValid(value));
  reply_.Set(index, value);
  // @@protoc_insertion_point(field_set:PipelineAckProto.reply)
}
 void PipelineAckProto::add_reply(::Status value) {
  assert(::Status_IsValid(value));
  reply_.Add(value);
  // @@protoc_insertion_point(field_add:PipelineAckProto.reply)
}
 const ::google::protobuf::RepeatedField<int>&
PipelineAckProto::reply() const {
  // @@protoc_insertion_point(field_list:PipelineAckProto.reply)
  return reply_;
}
 ::google::protobuf::RepeatedField<int>*
PipelineAckProto::mutable_reply() {
  // @@protoc_insertion_point(field_mutable_list:PipelineAckProto.reply)
  return &reply_;
}

// optional uint64 downstreamAckTimeNanos = 3 [default = 0];
bool PipelineAckProto::has_downstreamacktimenanos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PipelineAckProto::set_has_downstreamacktimenanos() {
  _has_bits_[0] |= 0x00000004u;
}
void PipelineAckProto::clear_has_downstreamacktimenanos() {
  _has_bits_[0] &= ~0x00000004u;
}
void PipelineAckProto::clear_downstreamacktimenanos() {
  downstreamacktimenanos_ = GOOGLE_ULONGLONG(0);
  clear_has_downstreamacktimenanos();
}
 ::google::protobuf::uint64 PipelineAckProto::downstreamacktimenanos() const {
  // @@protoc_insertion_point(field_get:PipelineAckProto.downstreamAckTimeNanos)
  return downstreamacktimenanos_;
}
 void PipelineAckProto::set_downstreamacktimenanos(::google::protobuf::uint64 value) {
  set_has_downstreamacktimenanos();
  downstreamacktimenanos_ = value;
  // @@protoc_insertion_point(field_set:PipelineAckProto.downstreamAckTimeNanos)
}

// repeated uint32 flag = 4 [packed = true];
int PipelineAckProto::flag_size() const {
  return flag_.size();
}
void PipelineAckProto::clear_flag() {
  flag_.Clear();
}
 ::google::protobuf::uint32 PipelineAckProto::flag(int index) const {
  // @@protoc_insertion_point(field_get:PipelineAckProto.flag)
  return flag_.Get(index);
}
 void PipelineAckProto::set_flag(int index, ::google::protobuf::uint32 value) {
  flag_.Set(index, value);
  // @@protoc_insertion_point(field_set:PipelineAckProto.flag)
}
 void PipelineAckProto::add_flag(::google::protobuf::uint32 value) {
  flag_.Add(value);
  // @@protoc_insertion_point(field_add:PipelineAckProto.flag)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PipelineAckProto::flag() const {
  // @@protoc_insertion_point(field_list:PipelineAckProto.flag)
  return flag_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PipelineAckProto::mutable_flag() {
  // @@protoc_insertion_point(field_mutable_list:PipelineAckProto.flag)
  return &flag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
